<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>LoPAS Real-Time Demo (PKO / Policy-as-Code)</title>
  <style>
    :root{--bg:#0b1020;--card:#121831;--muted:#9fb0d9;--text:#e9f0ff;--ok:#2fd47a;--warn:#ffb020;--bad:#ff5d6c}
    *{box-sizing:border-box;font-family:system-ui,-apple-system,Segoe UI,Roboto,"Hiragino Kaku Gothic ProN","Noto Sans JP",sans-serif}
    body{margin:0;background:radial-gradient(1200px 600px at 70% -200px,#1a254b 0%,#0b1020 55%,#0a0f1f 100%);color:var(--text)}
    header{padding:28px 20px 12px;max-width:1100px;margin:0 auto}
    h1{margin:0 0 6px;font-size:clamp(18px,3vw,26px)}
    .sub{color:var(--muted);font-size:14px}
    .wrap{max-width:1100px;margin:0 auto;padding:10px 20px 60px;display:grid;gap:16px;grid-template-columns:1.1fr .9fr}
    @media (max-width:980px){.wrap{grid-template-columns:1fr}}
    .card{background:linear-gradient(180deg,rgba(255,255,255,.03),rgba(255,255,255,.015));border:1px solid rgba(255,255,255,.08);box-shadow:0 12px 40px rgba(0,0,0,.35);border-radius:18px;padding:16px}
    .row{display:grid;grid-template-columns:150px 1fr 80px;gap:12px;align-items:center;margin:10px 0}
    .row label{font-weight:600}
    input[type=range]{width:100%}
    .badge{display:inline-flex;align-items:center;gap:8px;border-radius:999px;padding:6px 12px;font-weight:700;font-size:12px;letter-spacing:.2px}
    .g{background:rgba(47,212,122,.15);color:#bdf3d6;border:1px solid rgba(47,212,122,.35)}
    .a{background:rgba(255,176,32,.15);color:#ffe3b3;border:1px solid rgba(255,176,32,.35)}
    .r{background:rgba(255,93,108,.15);color:#ffd0d4;border:1px solid rgba(255,93,108,.35)}
    .kpi{display:flex;flex-wrap:wrap;gap:8px;margin:8px 0 0}
    .meter{height:10px;background:rgba(255,255,255,.08);border-radius:999px;overflow:hidden}
    .fill{height:100%;background:linear-gradient(90deg,#36d39e,#2a9df4);width:0%}
    .grid2{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    .mono{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;font-size:12px;white-space:pre-wrap;word-break:break-all;color:#cae0ff}
    .callout{border-left:4px solid #3aa5ff;background:rgba(58,165,255,.08);padding:10px 12px;border-radius:8px}
    button{background:#1f2b54;border:1px solid rgba(255,255,255,.12);color:#d9e6ff;padding:10px 14px;border-radius:12px;cursor:pointer}
    button:hover{filter:brightness(1.1)}
    textarea{width:100%;min-height:120px;background:#0f1733;color:#e9f0ff;border:1px solid rgba(255,255,255,.1);border-radius:12px;padding:10px}
    .topbar{display:flex;gap:8px;align-items:center;margin:8px 0 0}
    .pill{border:1px solid rgba(47,212,122,.4);color:#bdf3d6;background:rgba(47,212,122,.12);border-radius:999px;padding:4px 10px;font-size:12px}
    .muted{color:var(--muted)}
    .err{display:none;margin-top:8px;border:1px solid rgba(255,93,108,.35);color:#ffd0d4;background:rgba(255,93,108,.12);padding:8px 10px;border-radius:8px}
  </style>
</head>
<body>
  <header>
    <h1>LoPAS Real-Time Demo (PKO / Indicators × Policy-as-Code)</h1>
    <div class="sub">Paste a transcript or move the sliders, then click <strong>Analyze (API)</strong>. API recomputes indicators server-side on Cloudflare Workers.<br/>* Demo formulas only. Replace via adapters.</div>
    <div class="topbar">
      <span class="pill" id="apiPill">Live API</span>
      <span class="muted mono">API: <span id="api_url"></span></span>
    </div>
  </header>

  <main class="wrap">
    <!-- Left column -->
    <section class="card">
      <h3 style="margin:4px 0 10px">Input (Transcript / Minutes)</h3>
      <textarea id="docInput" placeholder="Paste conversation / minutes…"></textarea>
      <div style="display:flex;gap:8px;margin-top:8px;flex-wrap:wrap">
        <button id="analyzeBtn">Analyze (API)</button>
        <button id="exportBtn">Export Snapshot (JSON)</button>
        <span id="err" class="err">Error</span>
      </div>

      <h3 style="margin:16px 0 10px">Indicators</h3>
      <div id="rows"></div>

      <div class="grid2" style="margin-top:14px">
        <div class="card">
          <div style="display:flex;align-items:center;justify-content:space-between;gap:12px">
            <strong>Composite Risk (SCI)</strong>
            <span id="sciBadge" class="badge g">GREEN</span>
          </div>
          <div class="meter" style="margin-top:10px"><div id="sciFill" class="fill"></div></div>
          <div class="sub" style="margin-top:8px">SCI is inverse-weighted mix of CCI, DoQ, RDI, HRI, TRS, RVI. Higher = higher collapse risk.</div>
        </div>
        <div class="card">
          <div style="display:flex;align-items:center;justify-content:space-between;gap:12px">
            <strong>Density of Questions (DoQ)</strong>
            <span id="doqBadge" class="badge g">GREEN</span>
          </div>
          <div class="meter" style="margin-top:10px"><div id="doqFill" class="fill"></div></div>
          <div class="sub" style="margin-top:8px">Higher DoQ = healthier discourse. If low, prioritize branching education & open deliberation.</div>
        </div>
      </div>
    </section>

    <!-- Right column -->
    <section class="card">
      <h3 style="margin:4px 0 10px">Recommended Intervention</h3>
      <div id="advice" class="callout">—</div>
      <div class="kpi">
        <span id="phaseBadge" class="badge g">STABLE</span>
        <span id="playbookBadge" class="badge g">NONE</span>
        <span id="gradeBadge" class="badge g">GREEN</span>
      </div>
      <div style="margin-top:12px">
        <div class="mono" id="jsonOut"></div>
      </div>
    </section>
  </main>

  <script>
    // ===== Config/API =====
    const qs = (k)=> new URLSearchParams(location.search).get(k);
    const API = (qs('api') || 'https://icy-wave-e70d.hanabokur0.workers.dev').replace(/\/+$/,'');
    document.getElementById('api_url').textContent = API;

    // ===== UI state =====
    const INDICATORS = [
      {key:"DoQ", label:"DoQ (Density of Questions)"},
      {key:"CCI", label:"CCI (Connectivity)"},
      {key:"RDI", label:"RDI (Reasoning Divergence)"},
      {key:"HRI", label:"HRI (Hypothesis Reframing)"},
      {key:"TRS", label:"TRS (Total Resonant Score)"},
      {key:"RVI", label:"RVI (Restoration Value Index)"}
    ];
    const state = Object.fromEntries(INDICATORS.map(d=>[d.key,0.65]));
    let lastOutputs = null; // APIから返った値（0..100）

    // ===== Helpers =====
    const clamp01 = x => Math.max(0, Math.min(1, x));
    const toPct = u01 => Math.round(clamp01(u01) * 100);
    const toUnit = pct => clamp01((Number(pct)||0) / 100);

    function badge(el, band){ el.classList.remove('g','a','r'); el.textContent = band;
      el.classList.add(band==='GREEN'?'g':band==='YELLOW'?'a':'r'); }
    function width(el, v01){ el.style.width = (100*clamp01(v01)).toFixed(1) + '%'; }

    // ===== Rendering (sliders) =====
    function renderRows(){
      const wrap = document.getElementById('rows'); wrap.innerHTML='';
      INDICATORS.forEach(ind =>{
        const row = document.createElement('div'); row.className='row';
        const lab = document.createElement('label'); lab.textContent=ind.label;
        const range = document.createElement('input');
        range.type='range'; range.min='0'; range.max='1'; range.step='0.01'; range.value=state[ind.key];
        const val = document.createElement('div'); val.style.textAlign='right'; val.textContent=state[ind.key].toFixed(2);
        range.addEventListener('input', e=>{ state[ind.key]=Number(e.target.value); val.textContent=state[ind.key].toFixed(2); update();});
        const cell = document.createElement('div'); cell.appendChild(range);
        row.appendChild(lab); row.appendChild(cell); row.appendChild(val);
        wrap.appendChild(row);
      });
    }

    // ===== Local display update (uses lastOutputs if exists) =====
    function update(){
      const use = lastOutputs
        ? { // API値 (0..100) を 0..1 に
            DoQ:toUnit(lastOutputs.DoQ), CCI:toUnit(lastOutputs.CCI),
            RDI:toUnit(lastOutputs.RDI), HRI:toUnit(lastOutputs.HRI),
            TRS:toUnit(lastOutputs.TRS), RVI:toUnit(lastOutputs.RVI),
            SCI:toUnit(lastOutputs.SCI), SCI_grade:lastOutputs.SCI_grade,
            judgment:lastOutputs.judgment
          }
        : { // ローカルの状態（デモ用）
            ...state, SCI: computeSCI(state), SCI_grade: bandFromSCI(computeSCI(state)), judgment:null
          };

      // バッジ/ゲージ
      badge(document.getElementById('sciBadge'), use.SCI_grade);
      badge(document.getElementById('doqBadge'), bandForIndicator(use.DoQ));
      width(document.getElementById('sciFill'), use.SCI);
      width(document.getElementById('doqFill'), use.DoQ);

      // 右ペイン（judgmentがあれば優先）
      const pBadge = document.getElementById('playbookBadge');
      const phaseBadge = document.getElementById('phaseBadge');
      const gradeBadge = document.getElementById('gradeBadge');
      if(use.judgment){
        document.getElementById('advice').innerHTML =
          `<strong>${use.judgment.label}</strong>: ` + (use.judgment.bullets||[]).join(' / ');
        badge(gradeBadge, use.SCI_grade || 'GREEN');
        // 簡易フェーズ
        phaseBadge.textContent = (use.SCI >= 0.70) ? 'CRITICAL' : (use.SCI >= 0.55 ? 'WATCH' : 'STABLE');
        phaseBadge.className = 'badge ' + ((use.SCI >= 0.70)?'r':(use.SCI>=0.55)?'a':'g');
        pBadge.textContent = (use.SCI >= 0.70) ? 'HARD' : (use.SCI >= 0.55 ? 'SOFT' : 'NONE');
        pBadge.className = 'badge ' + ((use.SCI >= 0.70)?'r':(use.SCI>=0.55)?'a':'g');
      }else{
        document.getElementById('advice').textContent = 'Stable. Monitoring only.';
        badge(gradeBadge, use.SCI_grade);
      }
    }

    // ===== Demo-only local SCI (fallback) =====
    const weights = { DoQ:0.22, CCI:0.18, RDI:0.14, HRI:0.10, TRS:0.10, RVI:0.06 };
    function computeSCI(s){
      const inv = k => 1 - clamp01(s[k]);
      let score = inv('CCI')*weights.CCI + inv('DoQ')*weights.DoQ + inv('RDI')*weights.RDI
                + inv('HRI')*weights.HRI + inv('TRS')*weights.TRS + inv('RVI')*weights.RVI;
      const wsum = Object.values(weights).reduce((a,b)=>a+b,0);
      return clamp01(score/wsum);
    }
    function bandFromSCI(sci01){ // APIのGREEN/YELLOW/RED互換
      if(sci01 >= 0.70) return 'RED';
      if(sci01 >= 0.55) return 'YELLOW';
      return 'GREEN';
    }
    function bandForIndicator(v01){ // DoQなど個別（例としてDoQは高いほど良い）
      // 0..1 を単純に3段階
      if(v01 < 0.45) return 'RED';
      if(v01 < 0.60) return 'YELLOW';
      return 'GREEN';
    }

    // ===== API call =====
    async function analyzeAPI(){
      hideErr();
      const text = (document.getElementById('docInput').value||'').trim();
      let payload;
      if(text){
        payload = { documents:[{ text }] }; // Hモード
      }else{
        // スライダー→ scores（0..1 → 0..100）
        const scores = {};
        INDICATORS.forEach(ind => { scores[ind.key] = toPct(state[ind.key]); });
        payload = { scores }; // Bモード
      }
      try{
        const res = await fetch(API + '/api/score', {
          method:'POST',
          headers:{'content-type':'application/json'},
          body: JSON.stringify(payload),
          mode:'cors'
        });
        if(!res.ok) throw new Error('HTTP '+res.status);
        const data = await res.json();
        // outputs(0..100) を保存してUIをAPI優先に切替
        lastOutputs = data.outputs || null;
        update();
        document.getElementById('jsonOut').textContent = JSON.stringify(data, null, 2);
      }catch(err){
        showErr(err.message||String(err));
      }
    }

    // ===== UI wires =====
    function showErr(msg){ const el = document.getElementById('err'); el.textContent=msg; el.style.display='block'; }
    function hideErr(){ const el = document.getElementById('err'); el.style.display='none'; }

    document.getElementById('analyzeBtn').addEventListener('click', analyzeAPI);
    document.getElementById('exportBtn').addEventListener('click', ()=>{
      const snapshot = {
        timestamp: new Date().toISOString(),
        indicators: lastOutputs ? lastOutputs : Object.fromEntries(INDICATORS.map(d=>[d.key,toPct(state[d.key])]))
      };
      document.getElementById('jsonOut').textContent = JSON.stringify(snapshot, null, 2);
    });

    // ===== boot =====
    renderRows();
    update();
  </script>
</body>
</html>
